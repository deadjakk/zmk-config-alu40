/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // | ESC/~ |  Q   |  W   |  E   |  R   |  T   |   Y   |  U    |  I   |  O   |   P   | BSPC  |
            // | TAB   |  A   |  S   |  D   |  F   |  G   |   H   |  J    |  K   |  L   |   ;   |  '    |
            // | SHIFT |  Z   |  X   |  C   |  V   |  B   |   N   |  M    |  ,   |  .   |   /   |RET/SFT|
            // | PLAY  | LCTL | LALT | LGUI | LOWR |     SPACE    |  RAIS | LARW | UARW | DARW  |  RARW |

            bindings = <
&kp TAB         &kp Q      &kp W         &kp E     &kp R  &kp T      &kp Y         &kp U  &kp I         &kp O         &kp P         &kp BSPC
&kp LEFT_SHIFT  &kp A      &kp S         &kp D     &kp F  &kp G      &kp H         &kp J  &kp K         &kp L         &kp SEMI      &kp SQT
&kp LSHFT       &kp Z      &kp X         &kp C     &kp V  &kp B      &kp N         &kp M  &kp COMMA     &kp DOT       &kp FSLH      &kp RIGHT_SHIFT
&kp LCTRL       &kp LCTRL  &kp LEFT_WIN  &kp LGUI  &mo 1  &kp SPACE  &kp KP_ENTER  &mo 2  &kp LEFT_ALT  &kp LEFT_ALT  &kp LEFT_ALT  &kp ESC
            >;
        };

        lower {
            bindings = <
&kp LS(TAB)       &kp LS(N1)        &kp LS(N2)    &kp LS(N3)      &kp LS(N4)            &kp LS(N5)        &kp LS(N6)         &kp LS(N7)             &kp LS(N8)       &kp LS(N9)  &kp LS(N0)  &kp BACKSPACE
&kp LEFT_SHIFT    &kp EXCL          &kp AT        &kp HASH        &kp DLLR              &kp PERCENT       &kp CARET          &kp AMPERSAND          &kp ASTERISK     &kp MINUS   &kp EQUAL   &kp BACKSLASH
&kp LEFT_SHIFT    &kp Z             &kp X         &kp LEFT_BRACE  &kp LEFT_PARENTHESIS  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp RIGHT_PARENTHESIS  &kp RIGHT_BRACE  &kp PERIOD  &kp SLASH   &kp RIGHT_SHIFT
&kp LEFT_CONTROL  &kp LEFT_CONTROL  &kp LEFT_GUI  &kp LEFT_GUI    &none                 &kp SPACE         &kp ENTER          &mo 3                  &kp LEFT_ALT     &none       &none       &kp ESCAPE
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PG_DN>;
        };

        raise {
            bindings = <
&kp ESCAPE  &kp N1             &kp N2             &kp N3    &kp N4    &kp N5         &kp N6    &kp N7    &kp N8     &kp N9     &kp N0    &kp BSPC
&kp LCTRL   &kp C_VOLUME_UP    &kp C_VOLUME_DOWN  &kp F4    &kp HOME  &kp END        &kp LEFT  &kp DOWN  &kp UP     &kp RIGHT  &kp DEL   &kp GRAVE
&kp LCTRL   &kp K_APPLICATION  &kp X              &kp C     &kp V     &kp LS(TILDE)  &kp N     &kp M     &kp COMMA  &kp DOT    &kp FSLH  &kp RSHFT
&kp LCTRL   &kp LCTRL          &kp LGUI           &kp LGUI  &mo 3     &kp SPACE      &kp RET   &trans    &kp LALT   &none      &none     &kp ESCAPE
            >;

            sensor-bindings = <&inc_dec_kp C_BRI_DEC C_BRI_INC>;
        };

        control {
            bindings = <
&sys_reset       &bt BT_SEL 0     &bt BT_SEL 1     &bt BT_SEL 2     &bt BT_SEL 3     &bt BT_SEL 4     &trans  &trans  &trans      &trans  &trans  &bt BT_CLR
&rgb_ug RGB_ON   &rgb_ug RGB_HUI  &rgb_ug RGB_SAI  &rgb_ug RGB_BRI  &rgb_ug RGB_SPI  &rgb_ug RGB_EFF  &trans  &trans  &trans      &trans  &trans  &trans
&rgb_ug RGB_OFF  &rgb_ug RGB_HUD  &rgb_ug RGB_SAD  &rgb_ug RGB_BRD  &rgb_ug RGB_SPD  &rgb_ug RGB_EFR  &trans  &trans  &trans      &trans  &trans  &trans
&bootloader      &trans           &mo 0            &trans           &none            &trans           &trans  &trans  &bt BT_PRV  &trans  &trans  &bt BT_NXT
            >;

            sensor-bindings = <&inc_dec_kp LG(MINUS) LG(PLUS)>;
        };
    };
};
